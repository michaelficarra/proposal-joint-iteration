"use strict";
if (typeof Iterator === 'undefined' || Iterator == null) {
    globalThis.Iterator = {};
}
const DEFAULT_FILLER = void 0;
function getIteratorFlattenable(obj, stringHandling) {
    if (Object(obj) !== obj) {
        if (stringHandling === 'reject-strings' || typeof obj != 'string') {
            throw new TypeError;
        }
    }
    let iter = Symbol.iterator in obj ? obj[Symbol.iterator]() : obj;
    if (Object(iter) !== iter) {
        throw new TypeError;
    }
    return iter;
}
function isObject(obj) {
    return Object(obj) === obj;
}
function getOwnEnumerablePropertyKeys(obj) {
    let descriptors = Object.getOwnPropertyDescriptors(obj);
    let keys = Reflect.ownKeys(obj);
    return keys.filter(k => descriptors[k].enumerable);
}
;
function getMode(options) {
    let longest = options.longest;
    let strict = options.strict;
    if (longest && strict) {
        throw new TypeError;
    }
    return longest ? 'longest' : (strict ? 'strict' : 'shortest');
}
function* zipToArrays(input, options) {
    if (!isObject(input)) {
        throw new TypeError;
    }
    if (options === undefined) {
        options = Object.create(null);
    }
    if (!isObject(options)) {
        throw new TypeError;
    }
    let mode = getMode(options);
    let iters = [];
    let padding;
    try {
        for (let iter of input) {
            iters.push(getIteratorFlattenable(iter, 'iterate-strings'));
        }
        padding = iters.map(() => DEFAULT_FILLER);
        if (mode === 'longest') {
            let tmp = options.padding;
            if (tmp != null) {
                padding = Array.from(tmp);
            }
        }
    }
    catch (e) {
        for (let iter of iters) {
            try {
                iter.return?.();
            }
            catch { }
        }
        throw e;
    }
    yield* zipCore(iters, mode, padding);
}
function* zipToObjects(input, options) {
    if (!isObject(input)) {
        throw new TypeError;
    }
    if (options === undefined) {
        options = Object.create(null);
    }
    if (!isObject(options)) {
        throw new TypeError;
    }
    let mode = getMode(options);
    let keys = getOwnEnumerablePropertyKeys(input);
    let padding = keys.map(() => DEFAULT_FILLER);
    let iters = [];
    try {
        for (let k of keys) {
            iters.push(getIteratorFlattenable(input[k], 'iterate-strings'));
        }
        if (mode === 'longest') {
            let tmp = options.padding;
            if (tmp != null) {
                padding = keys.map(k => tmp[k]);
            }
        }
    }
    catch (e) {
        for (let iter of iters) {
            try {
                iter.return?.();
            }
            catch { }
        }
        throw e;
    }
    for (let result of zipCore(iters, mode, padding)) {
        yield Object.fromEntries(result.map((r, i) => [keys[i], r]));
    }
}
function getResults(iters, nexts) {
    return nexts.map(({ done, next }, i) => {
        if (done)
            return { done: true };
        try {
            let v = next.call(iters[i]);
            return v.done ? { done: true } : { done: false, value: v.value };
        }
        catch (e) {
            for (let k = 0; k < nexts.length; ++k) {
                if (k === i)
                    continue;
                try {
                    if (!nexts[k].done) {
                        iters[k].return?.();
                    }
                }
                catch { }
            }
            throw e;
        }
    });
}
function* zipCore(iters, mode, padding) {
    if (iters.length === 0)
        return;
    let nexts = iters.map((iter, i) => {
        try {
            return ({ done: false, next: iter.next });
        }
        catch (e) {
            for (let k = 0; k < iters.length; ++k) {
                if (k === i)
                    continue;
                try {
                    iters[k].return?.();
                }
                catch { }
            }
            throw e;
        }
    });
    while (true) {
        let results = getResults(iters, nexts);
        results.forEach((r, i) => {
            if (r.done) {
                nexts[i] = { done: true };
            }
        });
        switch (mode) {
            case 'shortest':
                if (results.some(r => r.done))
                    return;
                yield results.map(r => r.value);
                break;
            case 'longest':
                if (results.every(r => r.done))
                    return;
                yield results.map((r, i) => r.done ? padding[i] : r.value);
                break;
            case 'strict':
                if (results.every(r => r.done))
                    return;
                if (results.some(r => r.done)) {
                    throw new RangeError;
                }
                yield results.map(r => r.value);
                break;
        }
    }
}
Object.defineProperty(Iterator, 'zipToArrays', {
    configurable: true,
    writable: true,
    enumerable: false,
    value: zipToArrays,
});
Object.defineProperty(Iterator, 'zipToObjects', {
    configurable: true,
    writable: true,
    enumerable: false,
    value: zipToObjects,
});
//# sourceMappingURL=data:application/json;base64,