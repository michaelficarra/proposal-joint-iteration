"use strict";
if (typeof Iterator === 'undefined' || Iterator == null) {
    globalThis.Iterator = {};
}
const DEFAULT_FILLER = undefined;
function getIteratorFlattenable(obj, stringHandling) {
    if (Object(obj) !== obj) {
        if (stringHandling === 'reject-strings' || typeof obj != 'string') {
            throw new TypeError;
        }
    }
    let iter = Symbol.iterator in obj ? obj[Symbol.iterator]() : obj;
    if (Object(iter) !== iter) {
        throw new TypeError;
    }
    return iter;
}
function isObject(obj) {
    return Object(obj) === obj;
}
function getOwnEnumerablePropertyKeys(obj) {
    let descriptors = Object.getOwnPropertyDescriptors(obj);
    let keys = Reflect.ownKeys(obj);
    return keys.filter(k => descriptors[k].enumerable);
}
;
function getMode(options) {
    let mode = options.mode;
    if (mode === undefined) {
        mode = 'shortest';
    }
    if (mode !== 'shortest' && mode !== 'longest' && mode !== 'strict') {
        throw new TypeError;
    }
    return mode;
}
function* zip(input, options) {
    if (!isObject(input)) {
        throw new TypeError;
    }
    if (options === undefined) {
        options = Object.create(null);
    }
    if (!isObject(options)) {
        throw new TypeError;
    }
    let mode = getMode(options);
    let iters = [];
    let padding;
    try {
        for (let iter of input) {
            iters.push(getIteratorFlattenable(iter, 'iterate-strings'));
        }
        padding = iters.map(() => DEFAULT_FILLER);
        if (mode === 'longest') {
            let tmp = options.padding;
            if (tmp != null) {
                padding = Array.from(tmp);
            }
        }
    }
    catch (e) {
        for (let iter of iters) {
            try {
                iter.return?.();
            }
            catch { }
        }
        throw e;
    }
    yield* zipCore(iters, mode, padding);
}
function* zipToObjects(input, options) {
    if (!isObject(input)) {
        throw new TypeError;
    }
    if (options === undefined) {
        options = Object.create(null);
    }
    if (!isObject(options)) {
        throw new TypeError;
    }
    let mode = getMode(options);
    let keys = getOwnEnumerablePropertyKeys(input);
    let padding = keys.map(() => DEFAULT_FILLER);
    let iters = [];
    try {
        for (let k of keys) {
            iters.push(getIteratorFlattenable(input[k], 'iterate-strings'));
        }
        if (mode === 'longest') {
            let tmp = options.padding;
            if (tmp != null) {
                padding = keys.map(k => tmp[k]);
            }
        }
    }
    catch (e) {
        for (let iter of iters) {
            try {
                iter.return?.();
            }
            catch { }
        }
        throw e;
    }
    for (let result of zipCore(iters, mode, padding)) {
        yield Object.fromEntries(result.map((r, i) => [keys[i], r]));
    }
}
function getResults(iters, nexts) {
    return nexts.map(({ done, next }, i) => {
        if (done)
            return { done: true };
        try {
            let v = next.call(iters[i]);
            return v.done ? { done: true } : { done: false, value: v.value };
        }
        catch (e) {
            for (let k = 0; k < nexts.length; ++k) {
                if (k === i)
                    continue;
                try {
                    if (!nexts[k].done) {
                        iters[k].return?.();
                    }
                }
                catch { }
            }
            throw e;
        }
    });
}
function* zipCore(iters, mode, padding) {
    if (iters.length === 0)
        return;
    let nexts = iters.map((iter, i) => {
        try {
            return ({ done: false, next: iter.next });
        }
        catch (e) {
            for (let k = 0; k < iters.length; ++k) {
                if (k === i)
                    continue;
                try {
                    iters[k].return?.();
                }
                catch { }
            }
            throw e;
        }
    });
    while (true) {
        let results = getResults(iters, nexts);
        results.forEach((r, i) => {
            if (r.done) {
                nexts[i] = { done: true };
            }
        });
        switch (mode) {
            case 'shortest':
                if (results.some(r => r.done))
                    return;
                yield results.map(r => r.value);
                break;
            case 'longest':
                if (results.every(r => r.done))
                    return;
                yield results.map((r, i) => r.done ? padding[i] : r.value);
                break;
            case 'strict':
                if (results.every(r => r.done))
                    return;
                if (results.some(r => r.done)) {
                    throw new RangeError;
                }
                yield results.map(r => r.value);
                break;
        }
    }
}
Object.defineProperty(Iterator, 'zip', {
    configurable: true,
    writable: true,
    enumerable: false,
    value: zip,
});
Object.defineProperty(Iterator, 'zipToObjects', {
    configurable: true,
    writable: true,
    enumerable: false,
    value: zipToObjects,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7SUFDdkQsVUFBVSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDMUI7QUFFRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFFakMsU0FBUyxzQkFBc0IsQ0FBQyxHQUFRLEVBQUUsY0FBb0Q7SUFDNUYsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQ3ZCLElBQUksY0FBYyxLQUFLLGdCQUFnQixJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUNqRSxNQUFNLElBQUksU0FBUyxDQUFDO1NBQ3JCO0tBQ0Y7SUFDRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUF3QixDQUFDO0lBQ3RGLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN6QixNQUFNLElBQUksU0FBUyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBWTtJQUM1QixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUM7QUFDN0IsQ0FBQztBQUVELFNBQVMsNEJBQTRCLENBQW1CLEdBQU07SUFDNUQsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFtQixDQUFDO0lBQ2xELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENB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